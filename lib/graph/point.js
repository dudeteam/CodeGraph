cg.Point = (function () {

    /**
     * A point represents either an input or an output in a block, it has a name and a value type
     * A point can also have one or many references to other points:
     *    - The outbound point must be an output
     *    - The outbound point value type must be accepted by the inbound point
     *    - The outbound point must have a back reference to this point
     * Example for an input point:
     * {
     *      "cgBlock": "1", // The unique identifier to the block, required
     *      "cgName": "sum a", // The block input name, required
     *      "cgValueType": "Number", // The point value type, required
     *      "cgValue": 32 // The point value for an input, not required
     * }
     * Example for an output point:
     * {
     *      "cgBlock": "1", // The unique identifier to the block, required
     *      "cgName": "result", // The block output name, required
     *      "cgValueType": "Number", // The point value type, required
     *      // For an output, "cgValue" should be generated by the block and read only
     * }
     * @param cgBlock {cg.Block} The block this point refers to
     * @param cgName {String} The block point name for the input or output
     * @param isOutput {Boolean} True if this point is an output, False for an input
     * @constructor
     */
    var Point = pandora.class_("Point", function (cgBlock, cgName, isOutput) {
        /**
         * The graph of the block
         * @type {cg.Graph}
         * @private
         */
        this._cgGraph = cgBlock.cgGraph;
        Object.defineProperty(this, "cgGraph", {
            get: function () {
                return this._cgGraph;
            }.bind(this)
        });

        /**
         * The block it belongs to
         * @type {cg.Block}
         * @private
         */
        this._cgBlock = cgBlock;
        Object.defineProperty(this, "cgBlock", {
            get: function () {
                return this._cgBlock;
            }.bind(this)
        });

        /**
         * The block input/output name
         * @private
         */
        this._cgName = cgName;
        Object.defineProperty(this, "cgName", {
            get: function () {
                return this._cgName;
            }.bind(this)
        });

        /**
         * Point type, True if this point is an output, False for an input
         * @type {Boolean}
         * @private
         */
        this._isOutput = isOutput;
        Object.defineProperty(this, "isOutput", {
            get: function() {
                return this._isOutput;
            }.bind(this)
        });

        /**
         * Connections from/to this point
         * @type {Array<cg.Connection>}
         * @private
         */
        this._cgConnections = [];
        Object.defineProperty(this, "cgConnections", {
            get: function () {
                return this._cgConnections;
            }.bind(this)
        });

        /**
         * The point current value type
         * Example: Number (Yellow color)
         * @type {String}
         * @emit "cg-point-value-type-change" {cg.Point} {Object} {Object}
         * @private
         */
        this._cgValueType = undefined;
        Object.defineProperty(this, "cgValueType", {
            get: function () {
                return this._cgValueType;
            }.bind(this),
            set: function(cgValueType) {
                if (this._cgValueTypesAllowed.indexOf(cgValueType) === -1) {
                    throw cg.GraphError("Point::cgValueType() Cannot change cgValueType to a non allowed type `{0}`", cgValueType);
                }
                var oldCgValueType = this._cgValueType;
                if (this._cgConnections.length > 0 && oldCgValueType !== cgValueType) {
                    // TODO: Handle conversion
                    throw cg.GraphError("Point::cgValueType() Cannot change cgValueType if connections are bound to this point `{0}`", cgValueType);
                }
                this._cgValueType = cgValueType;
                this._cgGraph.emit("cg-point-value-type-change", this, oldCgValueType, cgValueType);
            }.bind(this)
        });

        /**
         * The point current value
         * @type {Object|null}
         * @emit "cg-point-value-change" {cg.Point} {Object} {Object}
         * @private
         */
        this._cgValue = null;
        Object.defineProperty(this, "cgValue", {
            get: function () {
                return this._cgValue;
            }.bind(this),
            set: function(cgValue) {
                this.cgValueType = pandora.typename(cgValue);
                var oldCgValue = this._cgValue;
                this._cgValue = cgValue;
                this._cgGraph.emit("cg-point-value-change", this, oldCgValue, cgValue);
            }.bind(this)
        });

        /**
         * The types this point can accept
         * @type {Array<String>}
         * @private
         */
        this._cgValueTypesAllowed = ["Number", "Boolean", "String"];
        Object.defineProperty(this, "cgValueTypesAllowed", {
            get: function () {
                return this._cgValueTypesAllowed;
            }.bind(this)
        });

        /**
         * The maximum number of connections this point can accept
         * [0; Infinity] number of connections
         * @type {Number}
         * @private
         */
        this._cgMaxConnections = 1;

    });

    /**
     * Adds a connection from this inbound point to an outbound point
     * @param {cg.Point} cgPoint
     * @return {cg.Connection}
     */
    Point.prototype.connect = function(cgPoint) {
        if (this._isOutput === cgPoint.isOutput) {
            throw new cg.GraphError("Point::connect() Cannot connect either two inputs or two outputs: `{0}` and `{1}`", this._cgName, cgPoint.cgName);
        }
        if (cgPoint.cgValueType !== this._cgValueType) {
            // TODO: Handle conversion
            throw new cg.GraphError("Point::connect() Cannot connect two points of different value types");
        }
        if (this._cgConnections.length >= this._cgMaxConnections) {
            throw new cg.GraphError("Point::connect() Cannot accept more than {0} connections", this._cgMaxConnections);
        }
        if (this._isOutput) {
            this._cgGraph.connectPoints(this, cgPoint);
        } else {
            this._cgGraph.connectPoints(cgPoint, this);
        }
    };

    /**
     * Returns a cloned copy of this point
     * The connections won't be cloned by this method
     * @param cgBlock {cg.Block} The block on which this cloned point will be attached to
     * @return {cg.Point}
     */
    Point.prototype.clone = function(cgBlock) {
        var cgPointClone = new cg.Point(cgBlock, this._cgName, this._isOutput);
        if (this._isOutput) {
            cgPointClone.cgValue = this._cgValue;
        }
        cgPointClone.cgValueType = this._cgValueType;
        return cgPointClone;
    };

    return Point;

})();